@page "/SearchMastodon"

@using KristofferStrube.ActivityStreams;
@using KristofferStrube.Blazor.FileSystem.WasmExample.Search;
@using static System.Text.Json.JsonSerializer;
@using System.Reactive.Linq;
@using System.Reactive.Subjects;
@using System.Diagnostics;

@inject IStorageManagerService StorageManagerService
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<PageTitle>File System - Search Mastodon</PageTitle>

<h2>Search Mastodon</h2>
<p>
    This sample page uses <a href="https://github.com/KristofferStrube/Blazor.FileSystem">Blazor.FileSystem</a> together with <a href="https://github.com/KristofferStrube/ActivityStreams">KristofferStrube/ActivityStream</a> to load a Mastodon user's posts, create search trees of their content, and store these search trees in the <b>Origin Private File System</b> so that they can be re-used on reloads or recurring searches.
</p>
@if (OriginPrivateDirectoryHandle is null)
{
    <p style="color:red;">
        The <a href="https://fs.spec.whatwg.org/">File System API</a> is only supported on few browsers, but most major vendors have committed to support it in the near future. So you might need to install alpha/beta release of your browser for this to work. This demo will run without using it in this case as your browser does not support it. 😢
        <br />
        <small>(This is the case for Chrome on mobile devices.)</small>
    </p>
}
<p>
    You can make full text searches in my newest posts below once they have been downloaded. You can also download the posts of another user by typing in their identifier. It downloads these posts and check in the file system if we have already created a suffix search tree for the post and uses that instead of creating a new one if available. The suffix tree can do a fuzzy search efficiently which allows small errors in the written search query.
</p>

<div class="input-group mb-3">
    <input type="text" @bind=@profile @bind:event="oninput" @bind:after="() => DownloadNewestPostsAsync(profile)" placeholder=@("@username@domain") class="form-control" aria-label="Profile" aria-describedby="profile-addon" />
    <span class="input-group-text" id="search-Profile">🐘</span>
</div>
<div>
    <center>
        @if (profileFeedback is string feedback)
        {
            <span>@feedback</span>
        }
        <span style="display:inline-block;width:50px;">
            @if (downloading)
            {
                <span>⏳</span>
            }
        </span>
    </center>
</div>
@if (profileFeedback is null)
{
    <div>
        <center>Loaded (@suffixTrees.Count()/@notes.Length) Notes</center>
    </div>
    <div class="input-group mb-3">
        <input type="text" @bind=@search @bind:event="oninput" placeholder="Search" class="form-control" aria-label="Search" aria-describedby="search-addon" @bind:after="() => SearchAsync(search)" />
        <span class="input-group-text" id="search-addon">🔍</span>
    </div>

    @if (results.Count() > 0 && results.First().Matches.Length > 0)
    {
        <div style="margin:10; border:solid lightgreen 1px;color:green;border-radius:5px;margin-top:10px;padding-right:10px;padding-left:10px;">
            <center>
                <span>
                    Found @results.Count() results
                </span>
                @if (results.Count() > 10)
                {
                    <i>(only showing 10)</i>
                }
                @if (resultTime is long time)
                {
                    <span> in @time (ms)</span>
                }
                <small style="color:grey;">
                    (@results.Count(result => result.Matches.Any(match => !match.Cigar.Contains('I') && !match.Cigar.Contains('D') && !match.Cigar.Contains('Q'))) were perfect matches)
                </small>
            </center>
        </div>
    }
}

@foreach (var result in results.Take(10))
{
    var note = notes.Single(note => note.Id == result.Resource);
    <NotePresenter Note="note" @key=note.Id />
}

@code {
    string profile = "@kristofferstrube@hachyderm.io";
    string search = "";
    string? profileFeedback;
    FileSystemDirectoryHandle? OriginPrivateDirectoryHandle;
    Note[] notes = Array.Empty<Note>();
    List<(string Resource, SamLine[] Matches)> results = new();
    Dictionary<string, NaiveSuffixTree> suffixTrees = new();
    CancellationTokenSource downloadCancellationSource = new CancellationTokenSource();
    CancellationTokenSource searchCancellationSource = new CancellationTokenSource();
    long? resultTime = null;
    bool downloading = false;

    Stopwatch renderWatch = Stopwatch.StartNew();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            OriginPrivateDirectoryHandle = await StorageManagerService.GetOriginPrivateDirectoryAsync();
        }
        catch
        {
            OriginPrivateDirectoryHandle = null;
        }
    }

    protected override bool ShouldRender()
    {
        var should = base.ShouldRender();
        if (should)
        {
            renderWatch = Stopwatch.StartNew();
        }
        return should;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        renderWatch.Stop();
        Console.WriteLine($"Took {renderWatch.ElapsedMilliseconds} (ms) to render.");

        if (!firstRender) return;

        await DownloadNewestPostsAsync(profile);
    }

    protected async Task DownloadNewestPostsAsync(string profile)
    {
        searchCancellationSource.Cancel();
        searchCancellationSource = new CancellationTokenSource();
        var searchCancellationToken = searchCancellationSource.Token;

        results = new();
        notes = Array.Empty<Note>();
        suffixTrees = new();
        downloading = false;
        search = "";

        if (string.IsNullOrWhiteSpace(profile))
        {
            await Task.CompletedTask;
            profileFeedback = "";
            StateHasChanged();
            return;
        }

        Console.WriteLine("Started download.");
        downloading = true;
        HttpResponseMessage? outboxResponse = null;

        try
        {
            outboxResponse = await HttpClient.GetAsync($"https://kristoffer-strube.dk/API/mastodon/Outbox/{profile}", searchCancellationToken)!;
            downloading = false;
        }
        catch
        {
            profileFeedback = "Could not reach domain.";
            downloading = false;
            await Task.CompletedTask;
            return;
        }

        if (!outboxResponse?.IsSuccessStatusCode is true)
        {
            profileFeedback = await outboxResponse!.Content.ReadFromJsonAsync<string>(cancellationToken: searchCancellationToken);
            profileFeedback ??= "Could not reach domain.";
            await Task.CompletedTask;
            return;
        }

        StateHasChanged();

        Console.WriteLine("Finished download.");

        var outbox = await outboxResponse!.Content.ReadFromJsonAsync<IObjectOrLink[]>(cancellationToken: searchCancellationToken);
        // We have to check the response.

        if (outbox is not IObjectOrLink[] outboxObjects)
        {
            profileFeedback = "Server Error occured.";
            await Task.CompletedTask;
            return;
        }

        notes = outboxObjects
            .Where(item => item is Create create && create.Object.Count() > 0 && create.Object.First() is Note)
            .Select(item => (Note)((Create)item).Object.First()!)
            .ToArray();

        profileFeedback = null;

        StateHasChanged();

        foreach (Note note in notes)
        {
            StateHasChanged();
            await Task.Delay(1);
            if (searchCancellationToken.IsCancellationRequested)
            {
                Console.WriteLine($"Canceled indexing progress ({notes.ToList().IndexOf(note)}/{notes.Count()})");
                await Task.FromCanceled(searchCancellationToken);
                return;
            }
            if (suffixTrees.ContainsKey(note.Id))
            {
                continue;
            }

            if (OriginPrivateDirectoryHandle is not null)
            {
                // Calculate hash of note content.
                using System.Security.Cryptography.SHA1 sha1 = System.Security.Cryptography.SHA1.Create();
                byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(note.Content.First());
                byte[] hashBytes = sha1.ComputeHash(inputBytes);
                var fileName = Convert.ToHexString(hashBytes) + ".msgpack.json";

                // Check if we have suffix tree for the note in
                var fileHandle = await OriginPrivateDirectoryHandle.GetFileHandleAsync(fileName, new() { Create = true });
                var file = await fileHandle.GetFileAsync();
                if (await file.GetSizeAsync() > 0)
                {
                    suffixTrees.Add(note.Id, MessagePack.MessagePackSerializer.Deserialize<NaiveSuffixTree>(await file.ArrayBufferAsync())!);
                    Console.WriteLine("We hit something we had already built.");
                    continue;
                }

                // Create Suffix Tree.
                var suffixTree = new NaiveSuffixTree(note.Content.First().ToLower());

                // Setup file.
                var writer = await fileHandle.CreateWritableAsync(new() { KeepExistingData = false });

                // Write Suffix Tree.
                await writer.WriteAsync(MessagePack.MessagePackSerializer.Serialize(suffixTree));
                await writer.CloseAsync();
                suffixTrees.Add(note.Id, suffixTree);
            }
            else
            {
                // Create Suffix Tree.
                var suffixTree = new NaiveSuffixTree(note.Content.First().ToLower());
                suffixTrees.Add(note.Id, suffixTree);
            }

            Console.WriteLine("We hit something new.");
        }

        Console.WriteLine("Finished building trees.");

        if (searchCancellationToken.IsCancellationRequested)
        {
            await Task.FromCanceled(searchCancellationToken);
            return;
        }

        await SearchAsync(search);
        StateHasChanged();

        Console.WriteLine("Finished search.");
    }

    protected async Task SearchAsync(string search)
    {
        searchCancellationSource.Cancel();
        searchCancellationSource = new CancellationTokenSource();
        var searchCancellationToken = searchCancellationSource.Token;

        var stopwatch = Stopwatch.StartNew();

        results = new List<(string Resource, SamLine[] Matches)>(suffixTrees.Count());

        if (string.IsNullOrWhiteSpace(search))
        {
            foreach (var suffixTreeKey in suffixTrees.Keys)
            {
                results.Add((suffixTreeKey, Array.Empty<SamLine>()));
                if (searchCancellationToken.IsCancellationRequested)
                {
                    await Task.FromCanceled(searchCancellationToken);
                    return;
                }
            }
            stopwatch.Stop();
            resultTime = null;
            Console.WriteLine($"Took {stopwatch.ElapsedMilliseconds} (ms) to search for \"{search}\"");
            await Task.CompletedTask;
            return;
        }

        foreach (var suffixTree in suffixTrees)
        {
            await Task.Delay(1);
            if (searchCancellationToken.IsCancellationRequested)
            {
                Console.WriteLine($"Canceled search progress ({suffixTrees.ToList().IndexOf(suffixTree)}/{suffixTrees.Count()}) for \"{search}\"");
                await Task.FromCanceled(searchCancellationToken);
                return;
            }
            var searchResult = suffixTree.Value.SearchForAllApproximateOccurences(suffixTree.Key, "simple", search.ToLower(), 1).Reverse().ToArray();
            if (searchResult.Length > 0)
            {
                results.Add((Resource: suffixTree.Key, Matches: searchResult));
            }
        }
        results = results
            .OrderByDescending(result => result.Matches.Any(match => !match.Cigar.Contains('I') && !match.Cigar.Contains('D') && !match.Cigar.Contains('Q')))
            .ThenByDescending(result => result.Matches.Length)
            .ToList();

        stopwatch.Stop();
        resultTime = stopwatch.ElapsedMilliseconds;
        Console.WriteLine($"Took {resultTime} (ms) to search for \"{search}\"");
    }
}