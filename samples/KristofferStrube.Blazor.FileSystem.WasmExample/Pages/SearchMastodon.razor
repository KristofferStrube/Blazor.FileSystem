@page "/SearchMastodon"

@using KristofferStrube.ActivityStreams;
@using KristofferStrube.Blazor.FileSystem.WasmExample.Search;
@using static System.Text.Json.JsonSerializer;
@using System.Reactive.Linq;
@using System.Reactive.Subjects;
@using System.Diagnostics;

@inject IStorageManagerService StorageManagerService
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<PageTitle>File System - Search Mastodon</PageTitle>

<h2>Search Mastodon</h2>
<p>
    This sample page <a href="https://github.com/KristofferStrube/Blazor.FileSystem">Blazor.FileSystem</a> together with <a href="https://github.com/KristofferStrube/ActivityStreams">KristofferStrube/ActivityStream</a> to load the posts of a user on Mastodon, create search trees of their content, and store these search trees in the <b>Origin Private File System</b> so that they can be re-used on reloads or recurring searches.
</p>
<p>
    The below example shows a collection of posts from my profile on Mastodon. You can search in them with full text search. It downloads these posts and check in the file system if we have already created a suffix search tree for the post and uses that instead of creating a new one if available. The suffix tree can do a fuzzy search efficiently which allows small errors in the written search query.
</p>

<div>
    <center>-- Loaded (@suffixTrees.Count()/@notes.Length) Notes --</center>
</div>
<div class="input-group mb-3">
    <input type="text" @bind=@search @bind:event="oninput" placeholder="Search" class="form-control" aria-label="Search" aria-describedby="search-addon" @bind:after="() => SearchAsync(search)" />
    <span class="input-group-text" id="search-addon">🔍</span>
</div>

@if (results.Count() > 0 && results.First().Matches.Length > 0)
{
    <div style="margin:10; border:solid lightgreen 1px;color:green;border-radius:5px;margin-top:10px;padding-right:10px;padding-left:10px;">
        <center>
            <span>
                @results.Count() results
            </span>
            @if (results.Count() > 10)
            {
                <i>- only showing 10</i>
            }
            <span style="color:grey;">
                (@results.Count(result => result.Matches.Any(match => !match.Cigar.Contains('I') && !match.Cigar.Contains('D') && !match.Cigar.Contains('Q'))) where matches)
            </span>
        </center>
    </div>
}

@foreach (var result in results.Take(10))
{
    var note = notes.Single(note => note.Id == result.Resource);
    <NotePresenter Note="note" />
}

@code {
    string search = "";
    Note[] notes = Array.Empty<Note>();
    List<(string Resource, SamLine[] Matches)> results = new();
    Dictionary<string, NaiveSuffixTree> suffixTrees = new();
    CancellationTokenSource searchCancellationSource = new CancellationTokenSource();

    Stopwatch renderWatch = Stopwatch.StartNew();

    protected override bool ShouldRender()
    {
        var should = base.ShouldRender();
        if (should)
        {
            renderWatch = Stopwatch.StartNew();
        }
        return should;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        renderWatch.Stop();
        Console.WriteLine($"Took {renderWatch.ElapsedMilliseconds} (ms) to render.");

        if (!firstRender) return;

        Console.WriteLine("Started download.");

        var outbox = await HttpClient.GetFromJsonAsync<IObjectOrLink[]>("https://kristoffer-strube.dk/API/mastodon/Outbox/@kristofferstrube@hachyderm.io")!;

        Console.WriteLine("Finished download.");

        notes = outbox
            .Where(item => item is Create create && create.Object.Count() > 0 && create.Object.First() is Note)
            .Select(item => (Note)((Create)item).Object.First()!)
            .ToArray();

        StateHasChanged();

        foreach (Note note in notes)
        {
            if (suffixTrees.ContainsKey(note.Id))
            {
                continue;
            }
            StateHasChanged();

            // Calculate hash of note content.
            using System.Security.Cryptography.SHA1 sha1 = System.Security.Cryptography.SHA1.Create();
            byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(note.Content.First());
            byte[] hashBytes = sha1.ComputeHash(inputBytes);
            var fileName = Convert.ToHexString(hashBytes) + ".msgpack.json";

            // Check if we have suffix tree for the note in
            var opfs = await StorageManagerService.GetOriginPrivateDirectoryAsync();
            var fileHandle = await opfs.GetFileHandleAsync(fileName, new() { Create = true });
            var file = await fileHandle.GetFileAsync();
            if (await file.GetSizeAsync() > 0)
            {
                suffixTrees.Add(note.Id, MessagePack.MessagePackSerializer.Deserialize<NaiveSuffixTree>(await file.ArrayBufferAsync())!);
                Console.WriteLine("We hit something we had already built.");
                continue;
            }

            // Create Suffix Tree.
            var suffixTree = new NaiveSuffixTree(note.Content.First().ToLower());

            // Setup file.
            var writer = await fileHandle.CreateWritableAsync(new() { KeepExistingData = false });

            // Write Suffix Tree.
            await writer.WriteAsync(MessagePack.MessagePackSerializer.Serialize(suffixTree));
            await writer.CloseAsync();

            suffixTrees.Add(note.Id, suffixTree);
            Console.WriteLine("We hit something new.");
        }

        Console.WriteLine("Finished building trees.");

        await SearchAsync(search);
        StateHasChanged();

        Console.WriteLine("Finished search.");
    }

    protected async Task SearchAsync(string search)
    {
        searchCancellationSource.Cancel();
        searchCancellationSource = new CancellationTokenSource();
        var searchCancellationToken = searchCancellationSource.Token;

        var stopwatch = Stopwatch.StartNew();

        results = new List<(string Resource, SamLine[] Matches)>(suffixTrees.Count());

        if (string.IsNullOrWhiteSpace(search))
        {
            foreach (var suffixTreeKey in suffixTrees.Keys)
            {
                results.Add((suffixTreeKey, Array.Empty<SamLine>()));
                if (searchCancellationToken.IsCancellationRequested) {
                    await Task.FromCanceled(searchCancellationToken);
                    return;
                }
            }
            stopwatch.Stop();
            Console.WriteLine($"Took {stopwatch.ElapsedMilliseconds} (ms) to search for \"{search}\"");
            await Task.CompletedTask;
            return;
        }

        foreach (var suffixTree in suffixTrees)
        {
            var searchResult = suffixTree.Value.SearchForAllApproximateOccurences(suffixTree.Key, "simple", search.ToLower(), 1).Reverse().ToArray();
            if (searchResult.Length > 0)
            {
                results.Add((Resource: suffixTree.Key, Matches: searchResult));
            }
            await Task.Delay(1);
            if (searchCancellationToken.IsCancellationRequested) {
                Console.WriteLine($"Canceled search progress ({suffixTrees.ToList().IndexOf(suffixTree)}/{suffixTrees.Count()}) for \"{search}\"");
                await Task.FromCanceled(searchCancellationToken);
                return;
            }
        }
        results = results
            .OrderByDescending(result => result.Matches.Any(match => !match.Cigar.Contains('I') && !match.Cigar.Contains('D') && !match.Cigar.Contains('Q')))
            .ThenByDescending(result => result.Matches.Length)
            .ToList();

        stopwatch.Stop();
        Console.WriteLine($"Took {stopwatch.ElapsedMilliseconds} (ms) to search for \"{search}\"");
    }
}