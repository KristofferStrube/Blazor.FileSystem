@inject IJSRuntime JSRuntime

@if (Element?.Kind is FileSystemHandleKind.File)
{
    <span style="width:16px;">🗒</span> @Element.Name
    <br />
}
else if (Element?.Kind is FileSystemHandleKind.Directory)
{
    if (@Element.Name is not "")
    {
        <span style="width:16px;">📁</span> @Element.Name
    }
    <div style="margin-left:16px;">
        @foreach (var child in children)
        {
            <nobr>
                <span @onclick="() => Remove(child)">❌</span>
                <ElementExplorer @key="child.Name" Element="child" />
            </nobr>
        }
    </div>
}

@code {
    private List<IFileSystemHandleInProcess> children = new();

    [Parameter, EditorRequired]
    public IFileSystemHandleInProcess Element { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Element is not FileSystemDirectoryHandleInProcess directoryHandle) return;

        children = (await directoryHandle.ValuesAsync()).ToList();
    }

    async Task Remove(IFileSystemHandleInProcess element)
    {
        if (Element is not FileSystemDirectoryHandleInProcess directoryHandle || (await directoryHandle.ResolveAsync(element)).Length is 0) return;

        await directoryHandle.RemoveEntryAsync(element.Name, new() { Recursive = true });
        children.Remove(element);
    }
}
